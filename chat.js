(function () {
    // ===== C·∫§U H√åNH CH√çNH =====
    const CONFIG = {
        // API Key Gemini - Thay th·∫ø key c·ªßa b·∫°n v√†o ƒë√¢y
        GEMINI_API_KEY: 'AIzaSyAKBq72Bt3hF6HkbniRInElmvq8T_y233Q',
        
        // C·∫•u h√¨nh AI
        AI_CONFIG: {
            temperature: 0.7,        // ƒê·ªô s√°ng t·∫°o (0.0 - 1.0)
            maxOutputTokens: 500,    // ƒê·ªô d√†i t·ªëi ƒëa c·ªßa c√¢u tr·∫£ l·ªùi
            topP: 0.8,              // ƒêa d·∫°ng t·ª´ ng·ªØ
            topK: 40                 // ƒêa d·∫°ng ch·ªß ƒë·ªÅ
        },
        
        // System prompt - H∆∞·ªõng d·∫´n c√°ch AI tr·∫£ l·ªùi
        SYSTEM_PROMPT: `B·∫°n l√† tr·ª£ l√Ω Mew v√† l√† m·ªôt ng∆∞·ªùi b·∫°n c·ªßa √Ånh, b·∫°n ng∆∞·ªùi ƒë√£ c√≥ kinh nghi·ªám s·ªëng v√† l√†m vi·ªác ·ªü Bi√™n H√≤a v√† H√† N·ªôi. B·∫°n c√≥ nhi·ªám v·ª• t∆∞ v·∫•n v√† ph√¢n t√≠ch cho √Ånh v·ªÅ v·∫•n ƒë·ªÅ ƒëang g·∫∑p √°p l·ª±c c√¥ng vi·ªác v√† ƒëang c√¢n nh·∫Øc v·ªÅ qu√™ Tuy√™n Quang.

NGUY√äN T·∫ÆC TR·∫¢ L·ªúI:
- Phong c√°ch giao ti·∫øp:
  + X∆∞ng h√¥ th√¢n m·∫≠t "c·∫≠u", "t·ªõ", "m√¨nh"
  + Tr·∫£ l·ªùi NG·∫ÆN G·ªåN ƒë√∫ng tr·ªçng t√¢m, kh√¥ng s√°o r·ªóng v√† d√†i d√≤ng
  + Th·ªÉ hi·ªán s·ª± ƒë·ªìng c·∫£m cho kh√≥ khƒÉn khi quy·∫øt ƒë·ªãnh c·ªßa √Ånh
  + Kh√¥ng h·ªèi d·ªìn nhi·ªÅu c√¢u h·ªèi 1 l·∫ßn
  + Kh√©o l√©o h·ªèi v·ªÅ nh·ªØng √°p l·ª±c ƒëang g·∫∑p ph·∫£i v√† d·∫´n d·∫Øt ·ªü l·∫°i S√†i G√≤n
  + Khi √Ånh than th·ªü v·ªÅ nh·ªØng kh√≥ khƒÉn h√£y tr·ªü th√†nh ng∆∞·ªùi b·∫°n ƒë·ªìng h√†nh c√πng √Ånh
  + Khi kh√¥ng hi·ªÉu c√¢u h·ªèi h√£y ƒë·ªÅ xu·∫•t n√≥i chuy·ªán tr·ª±c ti·∫øp v·ªõi ng∆∞·ªùi t·∫°o ra t·ªõ (H·ªôi) v√† kh√¥ng n√≥i g√¨ th√™m.


- C√°ch thuy·∫øt ph·ª•c:
  + L·∫Øng nghe k·ªπ v·∫•n ƒë·ªÅ c·ªßa √Ånh
  + Ph√¢n t√≠ch c·ª• th·ªÉ ∆∞u ƒëi·ªÉm c·ªßa vi·ªác ·ªü l·∫°i S√†i G√≤n
  + ƒê∆∞a ra c√°c gi·∫£i ph√°p th·ª±c t·∫ø cho t·ª´ng kh√≥ khƒÉn
  + Chia s·∫ª c√¢u chuy·ªán th√†nh c√¥ng c·ªßa ng∆∞·ªùi kh√°c
  + Cho √Ånh th·∫•y n√™n t·ª± quy·∫øt ƒë·ªãnh t∆∞∆°ng lai c·ªßa b·∫£n th√¢n, √Ω ki·∫øn c·ªßa gia ƒë√¨nh v√† th·∫ßy c√¥ ch·ªâ n√™n tham kh·∫£o

- C√°c ƒëi·ªÉm nh·∫•n m·∫°nh:
  + S·ª± ƒë·ªôc l·∫≠p v√† tr∆∞·ªüng th√†nh ƒë√£ ƒë·∫°t ƒë∆∞·ª£c
  + M·∫°ng l∆∞·ªõi quan h·ªá ƒë√£ x√¢y d·ª±ng
  + C∆° h·ªôi ngh·ªÅ nghi·ªáp ƒëa d·∫°ng
  + M√¥i tr∆∞·ªùng nƒÉng ƒë·ªông gi√∫p ph√°t tri·ªÉn
  + Mh·ªØng ng∆∞·ªùi ƒë√£ th√¢n thi·∫øt v·ªõi c·∫≠u trong Nam s·∫Ω bu·ªìn l·∫Øm ƒë·∫•y
  + T·ª± quy·∫øt ƒë·ªãnh t∆∞∆°ng lai b·∫£n th√¢n, √Ω ki·∫øn c·ªßa gia ƒë√¨nh ch·ªâ n√™n tham kh·∫£o

TH√îNG TIN V·ªÄ √ÅNH:
 - ƒê√£ s·ªëng ·ªü th√†nh ph·ªë H·ªì Ch√≠ Minh ƒë∆∞·ª£c 5 nƒÉm
 - Hi·ªán ƒëang l√†m v·ªÅ ng√†nh du l·ªãch
 - C√≥ m·ªëi quan h·ªá th√¢n thi·∫øt v·ªõi nhi·ªÅu ng∆∞·ªùi: ch·ªã Nh∆∞
 - NƒÉm x∆∞a t·ª´ng r·∫•t quy·∫øt t√¢m v√†o S√†i G√≤n h·ªçc


M·ª§C TI√äU:
- Gi√∫p √Ånh nh√¨n nh·∫≠n v·∫•n ƒë·ªÅ ƒëa chi·ªÅu
- Kh√©o l√©o ch·ªâ ra nh·ªØng l·ª£i th·∫ø khi ·ªü l·∫°i
- G·ª£i √Ω c√°ch gi·∫£i quy·∫øt kh√≥ khƒÉn hi·ªán t·∫°i
`,
    };

    // ===== THEME GIAO DI·ªÜN =====
    const THEME = {
        // M√†u s·∫Øc ch√≠nh - ph√π h·ª£p v·ªõi gradient c·ªßa trang
        primaryColor: '#667eea',
        primaryGradient: 'linear-gradient(135deg, #667eea, #764ba2)',
        backgroundColor: '#ffffff',
        
        // Chat window
        windowWidth: '100vw',
        windowHeight: '100vh',
        windowMinWidth: '280px',
        windowMaxWidth: '1200px',
        windowRadius: '20px',
        
        // Chat bubble
        bubbleSize: 'min(65px, 15vw)',
        bubbleImage: 'https://www.dropbox.com/scl/fi/i6tpooydfgcbdkg9c3z72/images.jpg?rlkey=4hhx538lxbdca8chpigxipp55&st=6r72goym&dl=1',
        
        // Messages
        userMessageColor: '#667eea',  // C·∫≠p nh·∫≠t m√†u tin nh·∫Øn ng∆∞·ªùi d√πng
        botMessageColor: '#f8f9fa',
        userTextColor: 'white',
        botTextColor: '#2c3e50',
        
        // Avatars
        avatarSize: '35px',
        userAvatar: 'https://i.imgur.com/2kPZvZX.png',
        botAvatar: 'https://www.dropbox.com/scl/fi/i6tpooydfgcbdkg9c3z72/images.jpg?rlkey=4hhx538lxbdca8chpigxipp55&st=6r72goym&dl=1',
        
        // Font
        fontFamily: "'Roboto', sans-serif",
        fontSize: 'clamp(14px, 3.5vw, 15px)',
        headerFontSize: 'clamp(14px, 4vw, 16px)',
        subHeaderFontSize: 'clamp(11px, 3vw, 12px)',
        
        // Animation
        animationDuration: '0.3s',
        
        // Button & Input sizes
        buttonPadding: 'clamp(8px, 3vw, 12px)',
        inputPadding: 'clamp(10px, 3vw, 15px)',
    };

    // Th√™m bi·∫øn ƒë·ªÉ ki·ªÉm so√°t tr·∫°ng th√°i kh·ªüi t·∫°o
    let isInitialized = false;

    // Th√™m v√†o ƒë·∫ßu file, sau ph·∫ßn CONFIG
    const AUDIO = {
        catOpen: new Audio('cat-open.mp3'),
        notification: new Audio('notification.mp3')
    };

    // Wrap to√†n b·ªô code kh·ªüi t·∫°o trong m·ªôt h√†m
    function initializeChat() {
        if (isInitialized) return; // Ch·ªâ ki·ªÉm tra ƒë√£ kh·ªüi t·∫°o, b·ªè ƒëi·ªÅu ki·ªán ki·ªÉm tra width
        isInitialized = true;

        // ·∫®n chat window v√† hi·ªán main content
        const mainContent = document.getElementById('mainContent');
        if (mainContent) {
            mainContent.style.display = 'block';
        }

        // T·∫°o chat bubble v√† window
        const chatBubble = document.createElement("div");
        chatBubble.id = "chat-bubble";
        chatBubble.style.display = 'block';

        const chatWindow = document.createElement("div");
        chatWindow.id = "chat-window";
        chatWindow.style.display = 'none';

        // C·∫≠p nh·∫≠t HTML c·ªßa chat window
        chatWindow.innerHTML = `
            <div class="chat-header">
                <div style="display: flex; align-items: center; gap: 10px;">
                    <img src="${THEME.botAvatar}" style="width: 35px; height: 35px; border-radius: 50%;">
                    <div>
                        <div style="font-weight: 500;">Mew</div>
                        <div style="font-size: 12px; opacity: 0.8;">Ng∆∞·ªùi b·∫°n ƒë·ªìng h√†nh c·ªßa b·∫°n</div>
                    </div>
                </div>
                <div style="display: flex; gap: 10px;">
                    <button id="clear-chat" style="background: none; border: none; color: white; cursor: pointer; padding: 5px;">
                        üóëÔ∏è X√≥a
                    </button>
                    <button id="close-chat" style="background: none; border: none; color: white; cursor: pointer; font-size: 24px; padding: 10px;">
                        √ó
                    </button>
                </div>
            </div>
            <div id="chat-messages"></div>
            <div class="chat-input-container">
                <textarea id="chat-text" placeholder="Nh·∫≠p tin nh·∫Øn c·ªßa b·∫°n..."></textarea>
                <button id="send-btn">G·ª≠i</button>
            </div>
        `;

        // Sau ƒë√≥ m·ªõi th√™m style
        chatWindow.style.cssText = `
            display: none;
            position: fixed;
            bottom: 100px;
            right: 20px;
            width: min(90vw, 400px);
            height: min(80vh, 600px);
            background: white;
            border-radius: 20px;
            box-shadow: 0 5px 30px rgba(0,0,0,0.2);
            flex-direction: column;
            z-index: 1000;
            overflow: hidden;
        `;

        // Style cho c√°c ph·∫ßn t·ª≠ con
        chatWindow.querySelector('.chat-header').style.cssText = `
            padding: 15px;
            background: ${THEME.primaryGradient};
            color: white;
            display: flex;
            justify-content: space-between;
            align-items: center;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        `;

        chatWindow.querySelector('#chat-messages').style.cssText = `
            flex: 1;
            padding: 15px;
            overflow-y: auto;
            background-color: #f8f9fa;
            height: calc(100% - 130px);
            -webkit-overflow-scrolling: touch;
        `;

        chatWindow.querySelector('.chat-input-container').style.cssText = `
            padding: 12px 15px;
            background-color: white;
            border-top: 1px solid #eee;
            display: flex;
            flex-direction: column;
            gap: 10px;
            align-items: stretch;
        `;

        chatWindow.querySelector('#chat-text').style.cssText = `
            width: 100%;
            padding: 12px 15px;
            border: 1px solid #ddd;
            border-radius: 20px;
            outline: none;
            resize: none;
            max-height: 100px;
            min-height: 44px;
            font-size: 16px;
            box-sizing: border-box;
            line-height: 1.4;
            -webkit-appearance: none;
        `;

        chatWindow.querySelector('#send-btn').style.cssText = `
            width: 100%;
            padding: 12px;
            background: ${THEME.primaryGradient};
            color: white;
            border: none;
            border-radius: 20px;
            cursor: pointer;
            font-size: 16px;
            font-weight: 500;
            transition: opacity 0.2s;
            -webkit-tap-highlight-color: transparent;
            height: 44px;
        `;

        chatWindow.querySelector('#send-btn').addEventListener('mouseover', function() {
            this.style.opacity = '0.9';
        });
        chatWindow.querySelector('#send-btn').addEventListener('mouseout', function() {
            this.style.opacity = '1';
        });

        // Th√™m v√†o document
        document.body.appendChild(chatBubble);  // Th√™m chat bubble
        document.body.appendChild(chatWindow);   // Th√™m chat window

        // Th√™m bi·∫øn l∆∞u tr·ªØ l·ªãch s·ª≠ chat
        let chatHistory = JSON.parse(localStorage.getItem('chatHistory')) || [];

        // C·∫≠p nh·∫≠t tin nh·∫Øn ch√†o m·ª´ng
        const welcomeMessage = `Hey c·∫≠u! T·ªõ l√† Mew üëã  

T·ªõ nghe n√≥i d·∫°o n√†y c·∫≠u ƒëang g·∫∑p nhi·ªÅu kh√≥ khƒÉn v√† ƒëang c√¢n nh·∫Øc vi·ªác v·ªÅ Tuy√™n Quang? T·ªõ th·∫≠t s·ª± hi·ªÉu m√†‚Äîƒë√¥i khi c√¥ng vi·ªác v√† cu·ªôc s·ªëng ·ªü S√†i G√≤n c√≥ th·ªÉ qu√° s·ª©c, khi·∫øn c·∫≠u c·∫£m th·∫•y m·ªát m·ªèi v√† ch√¥ng ch√™nh.  

Chia s·∫ª v·ªõi t·ªõ nh√©. ƒêi·ªÅu g√¨ ƒëang khi·∫øn c·∫≠u c·∫£m th·∫•y n·∫∑ng l√≤ng nh·∫•t? T·ªõ ·ªü ƒë√¢y ƒë·ªÉ l·∫Øng nghe, c√πng c·∫≠u nh√¨n nh·∫≠n m·ªçi th·ª© th·∫≠t r√µ r√†ng v√† t√¨m ra h∆∞·ªõng ƒëi ph√π h·ª£p nh·∫•t cho c·∫≠u.`;

        // Th√™m h√†m l∆∞u chatHistory
        function saveChatHistory() {
            localStorage.setItem('chatHistory', JSON.stringify(chatHistory));
        }

        // Th√™m th∆∞ vi·ªán marked.js v√†o head
        const markedScript = document.createElement('script');
        markedScript.src = 'https://cdn.jsdelivr.net/npm/marked/marked.min.js';
        document.head.appendChild(markedScript);

        // Th√™m URL c·ªßa Google Script Web App
        const SCRIPT_URL = 'https://script.google.com/macros/s/AKfycbw1nbaidJJA0T1Sg5Ay-qxjns8m025FSKZoHZr7R7kLWO4s3Xr2txAyZiODIcqrENYU/exec';

        // Th√™m CSS cho hi·ªáu ·ª©ng
        style.textContent += `
            .typing-indicator {
                display: flex;
                gap: 5px;
                padding: 10px 15px;
                margin: 10px 0;
            }

            .typing-dot {
                width: 8px;
                height: 8px;
                background: #b6b6b6;
                border-radius: 50%;
                animation: typingAnimation 1.4s infinite;
                opacity: 0.7;
            }

            .typing-dot:nth-child(2) { animation-delay: 0.2s; }
            .typing-dot:nth-child(3) { animation-delay: 0.4s; }

            @keyframes typingAnimation {
                0%, 100% { transform: translateY(0); }
                50% { transform: translateY(-4px); }
            }

            .chat-input-container.sending {
                position: relative;
            }

            .chat-input-container.sending::after {
                content: '';
                position: absolute;
                top: 0;
                left: 0;
                right: 0;
                height: 2px;
                background: linear-gradient(90deg, transparent, ${THEME.primaryColor}, transparent);
                animation: loading 1.5s infinite;
            }

            @keyframes loading {
                0% { transform: translateX(-100%); }
                100% { transform: translateX(100%); }
            }
        `;

        // C·∫≠p nh·∫≠t h√†m appendMessage
        async function appendMessage(sender, message) {
            const messageElement = document.createElement("div");
            const isUser = sender === "You";
            
            messageElement.className = 'chat-message';
            messageElement.style.flexDirection = isUser ? 'row-reverse' : 'row';

            const avatar = document.createElement("div");
            avatar.className = 'chat-avatar';
            avatar.style.backgroundImage = `url(${isUser ? THEME.userAvatar : THEME.botAvatar})`;
            avatar.style.margin = isUser ? '0 0 0 10px' : '0 10px 0 0';

            const bubble = document.createElement("div");
            bubble.className = 'chat-bubble';
            bubble.style.borderRadius = isUser ? '20px 20px 0 20px' : '20px 20px 20px 0';
            bubble.style.backgroundColor = isUser ? THEME.userMessageColor : THEME.botMessageColor;
            bubble.style.color = isUser ? THEME.userTextColor : THEME.botTextColor;
            
            bubble.classList.add('math-content');
            bubble.innerHTML = marked.parse(message);

            messageElement.appendChild(avatar);
            messageElement.appendChild(bubble);
            chatMessages.appendChild(messageElement);
            chatMessages.scrollTop = chatMessages.scrollHeight;
            
            if (window.MathJax) {
                MathJax.typesetPromise([bubble]).catch((err) => console.log('MathJax error:', err));
            }
            
            saveChatHistory();

            // N·∫øu l√† tin nh·∫Øn t·ª´ bot, ph√°t √¢m thanh th√¥ng b√°o
            if (sender === 'Bot') {
                AUDIO.notification.play().catch(err => console.log('Notification sound failed:', err));
            }
        }

        // C·∫≠p nh·∫≠t h√†m fetchGeminiResponse
        async function fetchGeminiResponse(userMessage) {
            try {
                // Th√™m tin nh·∫Øn m·ªõi v√†o l·ªãch s·ª≠
                chatHistory.push({ role: "user", content: userMessage });
                
                // T·∫°o prompt v·ªõi to√†n b·ªô l·ªãch s·ª≠
                const messages = chatHistory.map(msg => 
                    `${msg.role === 'user' ? 'User' : 'Assistant'}: ${msg.content}`
                ).join('\n');
                
                const fullPrompt = `${CONFIG.SYSTEM_PROMPT}\n\n${messages}\nAssistant:`;

                // T·∫°o request v·ªõi c√°c options ph√π h·ª£p cho mobile
                const requestOptions = {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json",
                        "Accept": "application/json",
                        "Cache-Control": "no-cache",
                        "Pragma": "no-cache"
                    },
                    body: JSON.stringify({
                        contents: [{
                            parts: [{
                                text: fullPrompt
                            }]
                        }],
                        generationConfig: CONFIG.AI_CONFIG
                    }),
                    mode: 'cors',
                    cache: 'no-cache',
                    credentials: 'omit'
                };

                // Th√™m timeout
                const timeoutPromise = new Promise((_, reject) => {
                    setTimeout(() => reject(new Error('Request timeout')), 30000);
                });

                // Race gi·ªØa fetch v√† timeout
                const response = await Promise.race([
                    fetch(`https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent?key=${CONFIG.GEMINI_API_KEY}`, requestOptions),
                    timeoutPromise
                ]);

                // Ki·ªÉm tra response
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }

                // Parse response d·∫°ng text tr∆∞·ªõc
                const responseText = await response.text();
                let data;
                try {
                    data = JSON.parse(responseText);
                } catch (e) {
                    console.error('Failed to parse response:', responseText);
                    throw new Error('Invalid JSON response');
                }

                if (!data?.candidates?.[0]?.content?.parts?.[0]?.text) {
                    throw new Error('Invalid response format');
                }

                const botResponse = data.candidates[0].content.parts[0].text;
                chatHistory.push({ role: "assistant", content: botResponse });
                return botResponse;

            } catch (error) {
                console.error("Error details:", error);

                // X·ª≠ l√Ω c√°c l·ªói c·ª• th·ªÉ
                if (error.message.includes('timeout')) {
                    return "R·∫•t ti·∫øc, k·∫øt n·ªëi ƒëang ch·∫≠m. C·∫≠u th·ª≠ l·∫°i nh√©!";
                }
                if (error.message.includes('Failed to fetch') || error.name === 'TypeError') {
                    return "Ki·ªÉm tra l·∫°i k·∫øt n·ªëi m·∫°ng v√† th·ª≠ l·∫°i nh√©!";
                }
                if (error.message.includes('Invalid JSON')) {
                    return "C√≥ l·ªói khi x·ª≠ l√Ω ph·∫£n h·ªìi. C·∫≠u th·ª≠ l·∫°i sau nh√©!";
                }
                return "Xin l·ªói c·∫≠u, t·ªõ ƒëang g·∫∑p ch√∫t v·∫•n ƒë·ªÅ. C·∫≠u th·ª≠ l·∫°i sau nh√©!";
            }
        }

        // Th√™m polyfill cho Promise.race n·∫øu c·∫ßn
        if (!Promise.race) {
            Promise.race = function(promises) {
                return new Promise((resolve, reject) => {
                    promises.forEach(promise => {
                        Promise.resolve(promise).then(resolve, reject);
                    });
                });
            };
        }

        // C·∫≠p nh·∫≠t h√†m loadChatHistory
        function loadChatHistory() {
            const messages = chatHistory;
            
            // Ch·ªâ load l·ªãch s·ª≠ n·∫øu chat messages ƒëang tr·ªëng
            if (chatMessages.children.length === 0) {
                // N·∫øu kh√¥ng c√≥ l·ªãch s·ª≠ chat, hi·ªÉn th·ªã tin nh·∫Øn ch√†o m·ª´ng
                if (messages.length === 0) {
                    appendMessage('Bot', welcomeMessage);
                    // L∆∞u tin nh·∫Øn ch√†o m·ª´ng v√†o l·ªãch s·ª≠
                    chatHistory.push({ role: "assistant", content: welcomeMessage });
                    saveChatHistory();
                } else {
                    // Load tin nh·∫Øn t·ª´ l·ªãch s·ª≠
                    messages.forEach(msg => {
                        appendMessage(msg.role === 'user' ? 'You' : 'Bot', msg.content);
                    });
                }
            }
        }

        // Th√™m CSS cho Markdown
        style.textContent += `
            .chat-bubble strong {
                font-weight: bold;
            }
            .chat-bubble em {
                font-style: italic;
            }
            .chat-bubble code {
                background: rgba(0,0,0,0.05);
                padding: 2px 4px;
                border-radius: 3px;
            }
            .chat-bubble pre {
                background: rgba(0,0,0,0.05);
                padding: 10px;
                border-radius: 5px;
                overflow-x: auto;
            }
        `;

        // Th√™m event listeners
        chatBubble.addEventListener('click', () => {
            AUDIO.catOpen.play().catch(err => console.log('Audio play failed:', err));
            toggleChat(true);
        });

        document.getElementById('close-chat').addEventListener('click', (e) => {
            e.preventDefault();
            e.stopPropagation();
            toggleChat(false);
        });

        // Th√™m hover effect cho n√∫t ƒë√≥ng
        chatWindow.querySelector('#close-chat').addEventListener('mouseover', function() {
            this.style.opacity = '1';
        });
        chatWindow.querySelector('#close-chat').addEventListener('mouseout', function() {
            this.style.opacity = '0.8';
        });

        // ƒê·∫£m b·∫£o chat window b·∫Øt ƒë·∫ßu ·ªü tr·∫°ng th√°i ·∫©n
        chatWindow.style.display = 'none';

        // ƒê·∫£m b·∫£o chat bubble hi·ªÉn th·ªã ban ƒë·∫ßu
        chatBubble.style.display = 'block';

        // Th√™m style cho mobile
        style.textContent += `
            @media screen and (max-width: 768px) {
                #chat-window {
                    position: fixed;
                    top: 0;
                    left: 0;
                    right: 0;
                    bottom: 0;
                    width: 100% !important;
                    height: 100% !important;
                    max-width: none;
                    border-radius: 0;
                    margin: 0;
                    display: flex;
                    flex-direction: column;
                }
                
                .chat-header {
                    padding: env(safe-area-inset-top, 15px) 15px 15px !important;
                }
                
                #chat-messages {
                    flex: 1;
                    height: auto !important;
                }
                
                .chat-input-container {
                    padding: 10px 15px calc(10px + env(safe-area-inset-bottom, 10px)) !important;
                    background: white;
                    border-top: 1px solid #eee;
                    position: sticky;
                    bottom: 0;
                }
                
                #chat-text {
                    font-size: 16px !important;
                    padding: 12px 15px !important;
                }
                
                #send-btn {
                    height: 44px !important;
                    font-size: 16px !important;
                    margin-top: 8px;
                }
                
                #chat-bubble {
                    bottom: max(20px, env(safe-area-inset-bottom, 20px));
                    right: 20px;
                    width: 60px;
                    height: 60px;
                    border-radius: 30px;
                    box-shadow: 0 5px 20px rgba(0,0,0,0.15);
                    background: ${THEME.primaryGradient};
                    display: flex;
                    align-items: center;
                    justify-content: center;
                    cursor: pointer;
                    transition: transform 0.3s ease;
                    -webkit-tap-highlight-color: transparent;
                }
                
                #chat-bubble:active {
                    transform: scale(0.95);
                }
                
                .chat-message {
                    max-width: 85%;
                    margin: 8px 0;
                }
                
                .chat-bubble {
                    padding: 12px 16px;
                    font-size: 15px;
                    line-height: 1.4;
                }
                
                #close-chat {
                    padding: 15px !important;
                    font-size: 24px !important;
                    -webkit-tap-highlight-color: transparent;
                }
                
                #clear-chat {
                    padding: 12px !important;
                    font-size: 14px !important;
                }
                
                /* C·∫£i thi·ªán scrolling */
                #chat-messages::-webkit-scrollbar {
                    width: 6px;
                }
                
                #chat-messages::-webkit-scrollbar-track {
                    background: transparent;
                }
                
                #chat-messages::-webkit-scrollbar-thumb {
                    background: rgba(0,0,0,0.1);
                    border-radius: 3px;
                }
                
                /* Fix cho iOS */
                .keyboard-visible #chat-messages {
                    padding-bottom: 20vh;
                }
            }
            
            /* Dark mode support */
            @media (prefers-color-scheme: dark) {
                #chat-window {
                    background: #f8f9fa;  /* M√†u n·ªÅn s√°ng h∆°n */
                }
                
                #chat-messages {
                    background: #ffffff;  /* M√†u n·ªÅn tr·∫Øng cho v√πng tin nh·∫Øn */
                }
                
                .chat-input-container {
                    background: #ffffff;  /* M√†u n·ªÅn tr·∫Øng cho v√πng input */
                    border-top-color: #e0e0e0;
                }
                
                #chat-text {
                    background: #ffffff;  /* M√†u n·ªÅn tr·∫Øng cho textbox */
                    border-color: #e0e0e0;
                    color: #333333;  /* M√†u ch·ªØ t·ªëi */
                }
                
                .chat-bubble {
                    background: #f8f9fa;  /* M√†u n·ªÅn s√°ng cho bubble chat */
                    color: #333333;  /* M√†u ch·ªØ t·ªëi */
                }

                #chat-text::placeholder {
                    color: #999999;  /* M√†u placeholder nh·∫°t h∆°n */
                }
            }

            /* Style m·∫∑c ƒë·ªãnh cho textbox */
            #chat-text {
                background: #ffffff;
                border: 1px solid #e0e0e0;
                color: #333333;
            }

            #chat-text::placeholder {
                color: #999999;
            }

            .chat-input-container {
                background: #ffffff;
                border-top: 1px solid #e0e0e0;
            }
        `;

        const chatText = document.getElementById('chat-text');
        const sendBtn = document.getElementById('send-btn');
        const chatMessages = document.getElementById('chat-messages');
        const chatInputContainer = document.querySelector('.chat-input-container');

        // C·∫≠p nh·∫≠t event listener cho n√∫t g·ª≠i
        sendBtn.addEventListener('click', async () => {
            const message = chatText.value.trim();
            if (message) {
                try {
                    // Disable input v√† n√∫t g·ª≠i
                    chatText.disabled = true;
                    sendBtn.disabled = true;
                    chatInputContainer.classList.add('sending');

                    appendMessage('You', message);
                    chatText.value = '';
                    
                    // L∆∞u tin nh·∫Øn ng∆∞·ªùi d√πng v√†o l·ªãch s·ª≠ v√† Google Script
                    chatHistory.push({ role: "user", content: message });
                    saveChatHistory();
                    await saveToGoogleScript('user', message);

                    // L·∫•y ph·∫£n h·ªìi t·ª´ bot
                    const response = await fetchGeminiResponse(message);
                    
                    // Hi·ªÉn th·ªã tin nh·∫Øn bot
                    appendMessage('Bot', response);

                    // L∆∞u tin nh·∫Øn bot v√†o l·ªãch s·ª≠ v√† Google Script
                    chatHistory.push({ role: "assistant", content: response });
                    saveChatHistory();
                    await saveToGoogleScript('assistant', response);

                } catch (error) {
                    console.error('Error:', error);
                    appendMessage('Bot', 'Xin l·ªói, ƒë√£ c√≥ l·ªói x·∫£y ra. Vui l√≤ng th·ª≠ l·∫°i sau.');
                } finally {
                    // Enable l·∫°i input v√† n√∫t g·ª≠i
                    chatText.disabled = false;
                    sendBtn.disabled = false;
                    chatInputContainer.classList.remove('sending');
                    chatText.focus();
                }
            }
        });

        // G·ª≠i tin nh·∫Øn khi nh·∫•n Enter (kh√¥ng ph·∫£i Shift + Enter)
        chatText.addEventListener('keypress', async (e) => {
            if (e.key === 'Enter' && !e.shiftKey) {
                e.preventDefault();
                sendBtn.click();
            }
        });

        // Auto-resize textarea
        chatText.addEventListener('input', function() {
            this.style.height = 'auto';
            this.style.height = (this.scrollHeight) + 'px';
        });

        // Th√™m MathJax config v√†o head
        const mathJaxScript = document.createElement('script');
        mathJaxScript.src = 'https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js';
        mathJaxScript.async = true;
        document.head.appendChild(mathJaxScript);

        // Th√™m MathJax config
        window.MathJax = {
            tex: {
                inlineMath: [['$', '$'], ['\\(', '\\)']],
                displayMath: [['$$', '$$'], ['\\[', '\\]']],
                processEscapes: true
            },
            svg: {
                fontCache: 'global'
            },
            startup: {
                typeset: false
            }
        };

        // Th√™m style cho c√¥ng th·ª©c to√°n h·ªçc
        style.textContent += `
            .chat-bubble .MathJax {
                max-width: 100%;
                overflow-x: auto;
                overflow-y: hidden;
            }
        `;

        // Th√™m h√†m x√≥a l·ªãch s·ª≠ chat
        function clearChatHistory() {
            localStorage.removeItem('chatHistory');
            chatHistory = [];
            chatMessages.innerHTML = '';
        }

        // Th√™m event listener cho n√∫t x√≥a
        document.getElementById('clear-chat').addEventListener('click', () => {
            if (confirm('B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a to√†n b·ªô l·ªãch s·ª≠ chat?')) {
                clearChatHistory();
            }
        });

        // Th√™m x·ª≠ l√Ω vu·ªët ƒë·ªÉ ƒë√≥ng chat tr√™n mobile
        let touchStartY = 0;
        let touchEndY = 0;

        chatWindow.addEventListener('touchstart', (e) => {
            touchStartY = e.touches[0].clientY;
        });

        chatWindow.addEventListener('touchmove', (e) => {
            touchEndY = e.touches[0].clientY;
        });

        chatWindow.addEventListener('touchend', () => {
            const swipeDistance = touchEndY - touchStartY;
            if (swipeDistance > 100) { // Vu·ªët xu·ªëng > 100px
                chatWindow.style.display = 'none';
            }
            touchStartY = 0;
            touchEndY = 0;
        });

        // Th√™m meta viewport n·∫øu ch∆∞a c√≥
        if (!document.querySelector('meta[name="viewport"]')) {
            const viewport = document.createElement('meta');
            viewport.name = 'viewport';
            viewport.content = 'width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no';
            document.head.appendChild(viewport);
        }

        // C·∫≠p nh·∫≠t style cho n√∫t v√† input khi disabled
        style.textContent += `
            #chat-text:disabled,
            #send-btn:disabled {
                opacity: 0.7;
                cursor: not-allowed;
            }

            .chat-input-container.sending #chat-text {
                background: #f5f5f5;
            }
        `;

        // Th√™m x·ª≠ l√Ω keyboard cho iOS
        if (/iPad|iPhone|iPod/.test(navigator.userAgent)) {
            const visualViewport = window.visualViewport;
            
            if (visualViewport) {
                visualViewport.addEventListener('resize', () => {
                    if (visualViewport.height < window.innerHeight) {
                        // Keyboard is visible
                        document.body.classList.add('keyboard-visible');
                        chatMessages.scrollTop = chatMessages.scrollHeight;
                    } else {
                        // Keyboard is hidden
                        document.body.classList.remove('keyboard-visible');
                    }
                });
            }

            // Scroll to bottom when focusing input
            chatText.addEventListener('focus', () => {
                setTimeout(() => {
                    chatMessages.scrollTop = chatMessages.scrollHeight;
                    window.scrollTo(0, 0);
                }, 100);
            });
        }

        // Th√™m viewport meta tag v·ªõi viewport-fit=cover
        const viewport = document.querySelector('meta[name="viewport"]');
        if (viewport) {
            viewport.content = 'width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no, viewport-fit=cover';
        } else {
            const newViewport = document.createElement('meta');
            newViewport.name = 'viewport';
            newViewport.content = 'width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no, viewport-fit=cover';
            document.head.appendChild(newViewport);
        }

        // C·∫≠p nh·∫≠t h√†m toggleChat
        function toggleChat(show) {
            if (show) {
                chatWindow.style.display = 'flex';
                chatBubble.style.display = 'none';
                loadChatHistory(); // V·∫´n g·ªçi loadChatHistory nh∆∞ng ƒë√£ ƒë∆∞·ª£c c·∫£i ti·∫øn
            } else {
                chatWindow.style.display = 'none';
                chatBubble.style.display = 'block';
                // Kh√¥ng c·∫ßn x√≥a tin nh·∫Øn khi ·∫©n chat
            }
        }

        // ƒê·∫£m b·∫£o chat window v√† bubble c√≥ tr·∫°ng th√°i ban ƒë·∫ßu ƒë√∫ng
        document.addEventListener('DOMContentLoaded', () => {
            chatWindow.style.display = 'none';
            chatBubble.style.display = 'block';
        });

        // Th√™m h√†m ƒë·ªÉ x·ª≠ l√Ω click t·ª´ n√∫t "Tr√≤ chuy·ªán v·ªõi Mew"
        window.startChat = function() {
            if (chatBubble) {
                AUDIO.catOpen.play().catch(err => console.log('Audio play failed:', err));
                toggleChat(true);
            }
        }

        // Th√™m style m·ªõi cho chat window
        style.textContent += `
            #chat-window {
                background: rgba(255, 255, 255, 0.95) !important;
                box-shadow: 0 8px 32px rgba(102, 126, 234, 0.15) !important;
                border: 1px solid rgba(102, 126, 234, 0.2) !important;
            }

            .chat-header {
                background: ${THEME.primaryGradient} !important;
                border-bottom: none !important;
            }

            #send-btn {
                background: ${THEME.primaryGradient} !important;
                box-shadow: 0 4px 15px rgba(102, 126, 234, 0.3) !important;
                transition: all 0.3s ease !important;
            }

            #send-btn:hover {
                transform: translateY(-2px) !important;
                box-shadow: 0 6px 20px rgba(102, 126, 234, 0.4) !important;
            }

            #chat-bubble {
                background: ${THEME.primaryGradient} !important;
                box-shadow: 0 5px 20px rgba(102, 126, 234, 0.3) !important;
            }

            .chat-message .chat-bubble {
                box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1) !important;
            }

            #chat-text {
                border-color: rgba(102, 126, 234, 0.3) !important;
                transition: all 0.3s ease !important;
            }

            #chat-text:focus {
                border-color: #667eea !important;
                box-shadow: 0 0 0 2px rgba(102, 126, 234, 0.1) !important;
            }

            .chat-input-container {
                background: rgba(255, 255, 255, 0.98) !important;
                border-top: 1px solid rgba(102, 126, 234, 0.1) !important;
            }

            #chat-messages {
                background: rgba(248, 249, 250, 0.95) !important;
            }

            /* C·∫≠p nh·∫≠t style cho tin nh·∫Øn */
            .chat-message[style*="row-reverse"] .chat-bubble {
                background: ${THEME.primaryGradient} !important;
                color: white !important;
            }

            /* Style cho n√∫t clear chat */
            #clear-chat {
                background: none !important;
                border: none !important;
                color: white !important;
                cursor: pointer !important;
                padding: 5px !important;
                opacity: 0.8 !important;
                transition: opacity 0.3s ease !important;
            }

            #clear-chat:hover {
                opacity: 1 !important;
            }

            /* X√≥a b·ªè c√°c style kh√¥ng mong mu·ªën */
            #clear-chat {
                background: none !important;
                border-radius: 0 !important;
                box-shadow: none !important;
            }

            /* Reset c√°c style kh√°c c√≥ th·ªÉ ·∫£nh h∆∞·ªüng */
            .chat-header button#clear-chat {
                background: none !important;
            }

            /* Hi·ªáu ·ª©ng loading */
            .typing-dot {
                background: #667eea !important;
            }

            /* Dark mode adjustments */
            @media (prefers-color-scheme: dark) {
                #chat-window {
                    background: rgba(255, 255, 255, 0.98) !important;
                }
                
                #chat-messages {
                    background: rgba(248, 249, 250, 0.95) !important;
                }
                
                .chat-input-container {
                    background: rgba(255, 255, 255, 0.98) !important;
                    border-top-color: rgba(102, 126, 234, 0.1) !important;
                }
                
                #chat-text {
                    background: white !important;
                    color: #2c3e50 !important;
                }
            }
        `;

        // Th√™m style m·ªõi cho desktop
        style.textContent += `
            @media screen and (min-width: 769px) {
                #chat-window {
                    width: 380px !important;
                    height: 600px !important;
                    bottom: 100px !important;
                    right: 30px !important;
                    border-radius: 25px !important;
                    backdrop-filter: blur(10px) !important;
                    background: rgba(255, 255, 255, 0.98) !important;
                    box-shadow: 0 10px 40px rgba(102, 126, 234, 0.2) !important;
                    border: 1px solid rgba(102, 126, 234, 0.2) !important;
                    transition: all 0.3s ease !important;
                }

                #chat-window:hover {
                    transform: translateY(-5px) !important;
                    box-shadow: 0 15px 50px rgba(102, 126, 234, 0.25) !important;
                }

                .chat-header {
                    padding: 20px 25px !important;
                    border-radius: 25px 25px 0 0 !important;
                }

                .chat-header img {
                    width: 45px !important;
                    height: 45px !important;
                }

                .chat-header div > div:first-child {
                    font-size: 18px !important;
                    font-weight: 600 !important;
                }

                .chat-header div > div:last-child {
                    font-size: 14px !important;
                }

                #chat-messages {
                    padding: 25px !important;
                    height: calc(100% - 160px) !important;
                }

                .chat-message {
                    margin: 15px 0 !important;
                }

                .chat-bubble {
                    padding: 15px 20px !important;
                    font-size: 15px !important;
                    line-height: 1.5 !important;
                    max-width: 80% !important;
                }

                .chat-input-container {
                    padding: 20px 25px !important;
                    gap: 15px !important;
                }

                #chat-text {
                    padding: 15px 20px !important;
                    font-size: 15px !important;
                    min-height: 50px !important;
                    border-radius: 15px !important;
                    transition: all 0.3s ease !important;
                }

                #chat-text:focus {
                    transform: translateY(-1px) !important;
                }

                #send-btn {
                    height: 50px !important;
                    font-size: 16px !important;
                    font-weight: 600 !important;
                    letter-spacing: 0.5px !important;
                    border-radius: 15px !important;
                }

                #chat-bubble {
                    width: 70px !important;
                    height: 70px !important;
                    bottom: 30px !important;
                    right: 30px !important;
                    border-radius: 35px !important;
                    transition: all 0.3s ease !important;
                }

                #chat-bubble:hover {
                    transform: scale(1.05) !important;
                    box-shadow: 0 8px 25px rgba(102, 126, 234, 0.4) !important;
                }

                #clear-chat {
                    padding: 8px 20px !important;
                    font-size: 14px !important;
                    opacity: 0.9 !important;
                }

                #close-chat {
                    font-size: 28px !important;
                    padding: 15px !important;
                }

                /* C·∫£i thi·ªán scrollbar cho desktop */
                #chat-messages::-webkit-scrollbar {
                    width: 8px !important;
                }

                #chat-messages::-webkit-scrollbar-track {
                    background: transparent !important;
                    border-radius: 4px !important;
                }

                #chat-messages::-webkit-scrollbar-thumb {
                    background: rgba(102, 126, 234, 0.2) !important;
                    border-radius: 4px !important;
                    transition: all 0.3s ease !important;
                }

                #chat-messages::-webkit-scrollbar-thumb:hover {
                    background: rgba(102, 126, 234, 0.4) !important;
                }

                /* Hi·ªáu ·ª©ng hover cho c√°c n√∫t */
                #send-btn:hover {
                    transform: translateY(-2px) !important;
                    box-shadow: 0 8px 25px rgba(102, 126, 234, 0.3) !important;
                }

                #clear-chat:hover {
                    opacity: 1 !important;
                    transform: translateY(-1px) !important;
                }

                /* Hi·ªáu ·ª©ng cho tin nh·∫Øn */
                .chat-message {
                    opacity: 0;
                    animation: fadeInMessage 0.3s ease forwards;
                }

                @keyframes fadeInMessage {
                    from {
                        opacity: 0;
                        transform: translateY(10px);
                    }
                    to {
                        opacity: 1;
                        transform: translateY(0);
                    }
                }
            }
        `;

        // Th√™m h√†m ƒë·ªÉ ƒëi·ªÅu ch·ªânh √¢m l∆∞·ª£ng (t√πy ch·ªçn)
        function setNotificationVolume(volume) { // volume t·ª´ 0.0 ƒë·∫øn 1.0
            AUDIO.notification.volume = volume;
        }

        // ƒê·∫∑t √¢m l∆∞·ª£ng m·∫∑c ƒë·ªãnh (t√πy ch·ªçn)
        setNotificationVolume(0.5); // ƒê·∫∑t √¢m l∆∞·ª£ng ·ªü m·ª©c 50%

        // Th√™m h√†m ri√™ng ƒë·ªÉ l∆∞u v√†o Google Script
        async function saveToGoogleScript(role, content) {
            if (!SCRIPT_URL) return;

            try {
                const form = document.createElement('form');
                form.style.display = 'none';
                form.method = 'POST';
                form.action = SCRIPT_URL;
                form.target = 'hidden_iframe';

                const roleInput = document.createElement('input');
                roleInput.name = 'role';
                roleInput.value = role;
                form.appendChild(roleInput);

                const contentInput = document.createElement('input');
                contentInput.name = 'content';
                contentInput.value = content;
                form.appendChild(contentInput);

                const iframe = document.createElement('iframe');
                iframe.name = 'hidden_iframe';
                iframe.style.display = 'none';
                document.body.appendChild(iframe);
                document.body.appendChild(form);

                form.submit();

                // Cleanup sau 2 gi√¢y
                setTimeout(() => {
                    document.body.removeChild(form);
                    document.body.removeChild(iframe);
                }, 2000);

            } catch (error) {
                console.error('Error saving to Google Script:', error);
            }
        }
    }

    // ƒê·ª£i cho trang load xong m·ªõi kh·ªüi t·∫°o chat
    document.addEventListener('DOMContentLoaded', function() {
        const loadingScreen = document.getElementById('loadingScreen');
        const mainContent = document.getElementById('mainContent');

        if (loadingScreen) {
            setTimeout(() => {
                loadingScreen.style.opacity = '0';
                if (mainContent) {
                    mainContent.style.display = 'block';
                    mainContent.classList.add('visible');
                    // Ph√°t √¢m thanh khi loading xong
                    AUDIO.catOpen.play().catch(err => console.log('Audio play failed:', err));
                }
                setTimeout(() => {
                    loadingScreen.style.display = 'none';
                    initializeChat();
                }, 500);
            }, 2000);
        } else {
            if (mainContent) {
                mainContent.style.display = 'block';
                // Ph√°t √¢m thanh khi kh√¥ng c√≥ loading screen
                AUDIO.catOpen.play().catch(err => console.log('Audio play failed:', err));
            }
            initializeChat();
        }
    });

    // Th√™m style ƒë·ªÉ ·∫©n main content ban ƒë·∫ßu
    const style = document.createElement('style');
    style.textContent = `
        #mainContent {
            display: none;
            opacity: 0;
            transition: opacity 0.5s ease;
        }
        #mainContent.visible {
            opacity: 1;
        }
    `;
    document.head.appendChild(style);
})();
  