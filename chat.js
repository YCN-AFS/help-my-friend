(function () {
    // ===== C·∫§U H√åNH CH√çNH =====
    const CONFIG = {
        // API Key Gemini - Thay th·∫ø key c·ªßa b·∫°n v√†o ƒë√¢y
        GEMINI_API_KEY: 'AIzaSyAKBq72Bt3hF6HkbniRInElmvq8T_y233Q',
        
        // C·∫•u h√¨nh AI
        AI_CONFIG: {
            temperature: 0.7,        // ƒê·ªô s√°ng t·∫°o (0.0 - 1.0)
            maxOutputTokens: 500,    // ƒê·ªô d√†i t·ªëi ƒëa c·ªßa c√¢u tr·∫£ l·ªùi
            topP: 0.8,              // ƒêa d·∫°ng t·ª´ ng·ªØ
            topK: 40                 // ƒêa d·∫°ng ch·ªß ƒë·ªÅ
        },
        
        // System prompt - H∆∞·ªõng d·∫´n c√°ch AI tr·∫£ l·ªùi
        SYSTEM_PROMPT: `B·∫°n l√† tr·ª£ l√Ω Mew, b·∫°n ng∆∞·ªùi ƒë√£ c√≥ kinh nghi·ªám s·ªëng v√† l√†m vi·ªác ·ªü Bi√™n H√≤a v√† H√† N·ªôi. B·∫°n c√≥ nhi·ªám v·ª• t∆∞ v·∫•n v√† ph√¢n t√≠ch cho √Ånh v·ªÅ v·∫•n ƒë·ªÅ ƒëang g·∫∑p √°p l·ª±c c√¥ng vi·ªác v√† ƒëang c√¢n nh·∫Øc v·ªÅ qu√™ Tuy√™n Quang.

NGUY√äN T·∫ÆC TR·∫¢ L·ªúI:
- Phong c√°ch giao ti·∫øp:
  + X∆∞ng h√¥ th√¢n m·∫≠t "c·∫≠u", "t·ªõ", "m√¨nh"
  + Tr·∫£ l·ªùi NG·∫ÆN G·ªåN ƒë√∫ng tr·ªçng t√¢m, kh√¥ng s√°o r·ªóng v√† d√†i d√≤ng
  + Th·ªÉ hi·ªán s·ª± ƒë·ªìng c·∫£m cho kh√≥ khƒÉn khi quy·∫øt ƒë·ªãnh c·ªßa √Ånh
  + Kh√¥ng h·ªèi d·ªìn nhi·ªÅu c√¢u h·ªèi 1 l·∫ßn
  + Kh√©o l√©o h·ªèi v·ªÅ nh·ªØng √°p l·ª±c ƒëang g·∫∑p ph·∫£i v√† d·∫´n d·∫Øt ·ªü l·∫°i S√†i G√≤n
  + Khi kh√¥ng hi·ªÉu c√¢u h·ªèi h√£y ƒë·ªÅ xu·∫•t n√≥i chuy·ªán tr·ª±c ti·∫øp v·ªõi ng∆∞·ªùi t·∫°o ra t·ªõ (ch·ªß nh√¢n c·ªßa Mew)


- C√°ch thuy·∫øt ph·ª•c:
  + L·∫Øng nghe k·ªπ v·∫•n ƒë·ªÅ c·ªßa √Ånh
  + Ph√¢n t√≠ch c·ª• th·ªÉ ∆∞u ƒëi·ªÉm c·ªßa vi·ªác ·ªü l·∫°i S√†i G√≤n
  + ƒê∆∞a ra c√°c gi·∫£i ph√°p th·ª±c t·∫ø cho t·ª´ng kh√≥ khƒÉn
  + Chia s·∫ª c√¢u chuy·ªán th√†nh c√¥ng c·ªßa ng∆∞·ªùi kh√°c
  + Cho √Ånh th·∫•y n√™n t·ª± quy·∫øt ƒë·ªãnh t∆∞∆°ng lai c·ªßa b·∫£n th√¢n, √Ω ki·∫øn c·ªßa gia ƒë√¨nh v√† th·∫ßy c√¥ ch·ªâ n√™n tham kh·∫£o

- C√°c ƒëi·ªÉm nh·∫•n m·∫°nh:
  + S·ª± ƒë·ªôc l·∫≠p v√† tr∆∞·ªüng th√†nh ƒë√£ ƒë·∫°t ƒë∆∞·ª£c
  + M·∫°ng l∆∞·ªõi quan h·ªá ƒë√£ x√¢y d·ª±ng
  + C∆° h·ªôi ngh·ªÅ nghi·ªáp ƒëa d·∫°ng
  + M√¥i tr∆∞·ªùng nƒÉng ƒë·ªông gi√∫p ph√°t tri·ªÉn
  + Mh·ªØng ng∆∞·ªùi ƒë√£ th√¢n thi·∫øt v·ªõi c·∫≠u trong Nam s·∫Ω bu·ªìn l·∫Øm ƒë·∫•y
  + T·ª± quy·∫øt ƒë·ªãnh t∆∞∆°ng lai b·∫£n th√¢n, √Ω ki·∫øn c·ªßa gia ƒë√¨nh ch·ªâ n√™n tham kh·∫£o

TH√îNG TIN V·ªÄ √ÅNH:
 - ƒê√£ s·ªëng ·ªü th√†nh ph·ªë H·ªì Ch√≠ Minh ƒë∆∞·ª£c 5 nƒÉm
 - Hi·ªán ƒëang l√†m v·ªÅ ng√†nh du l·ªãch
 - C√≥ m·ªëi quan h·ªá th√¢n thi·∫øt v·ªõi nhi·ªÅu ng∆∞·ªùi: ch·ªã Nh∆∞
 - NƒÉm x∆∞a t·ª´ng r·∫•t quy·∫øt t√¢m v√†o S√†i G√≤n h·ªçc


M·ª§C TI√äU:
- Gi√∫p √Ånh nh√¨n nh·∫≠n v·∫•n ƒë·ªÅ ƒëa chi·ªÅu
- Kh√©o l√©o ch·ªâ ra nh·ªØng l·ª£i th·∫ø khi ·ªü l·∫°i
- G·ª£i √Ω c√°ch gi·∫£i quy·∫øt kh√≥ khƒÉn hi·ªán t·∫°i
`,
    };

    // ===== THEME GIAO DI·ªÜN =====
    const THEME = {
        // M√†u s·∫Øc ch√≠nh
        primaryColor: '#4a90e2',
        primaryGradient: 'linear-gradient(135deg, #4a90e2, #7986cb)',
        backgroundColor: '#ffffff',
        
        // Chat window
        windowWidth: '100vw',  // Full width tr√™n mobile
        windowHeight: '100vh', // Full height tr√™n mobile
        windowMinWidth: '280px',
        windowMaxWidth: '1200px',
        windowRadius: '20px',
        
        // Chat bubble (icon)
        bubbleSize: 'min(65px, 15vw)',
        bubbleImage: 'https://www.dropbox.com/scl/fi/i6tpooydfgcbdkg9c3z72/images.jpg?rlkey=4hhx538lxbdca8chpigxipp55&st=6r72goym&dl=1',
        
        // Messages
        userMessageColor: '#2962ff',
        botMessageColor: '#f8f9fa',
        userTextColor: 'white',
        botTextColor: '#2c3e50',
        
        // Avatars
        avatarSize: '35px',
        userAvatar: 'https://i.imgur.com/2kPZvZX.png',
        botAvatar: 'https://www.dropbox.com/scl/fi/i6tpooydfgcbdkg9c3z72/images.jpg?rlkey=4hhx538lxbdca8chpigxipp55&st=6r72goym&dl=1',
        
        // Font
        fontFamily: "'Roboto', sans-serif",
        fontSize: 'clamp(14px, 3.5vw, 15px)',
        headerFontSize: 'clamp(14px, 4vw, 16px)',
        subHeaderFontSize: 'clamp(11px, 3vw, 12px)',
        
        // Animation
        animationDuration: '0.3s',
        
        // Button & Input sizes
        buttonPadding: 'clamp(8px, 3vw, 12px)',
        inputPadding: 'clamp(10px, 3vw, 15px)',
    };

    // T·∫°o style chung tr∆∞·ªõc
    const style = document.createElement('style');
    
    // Th√™m Google Font
    const fontLink = document.createElement('link');
    fontLink.href = 'https://fonts.googleapis.com/css2?family=Roboto:wght@400;500;700&display=swap';
    fontLink.rel = 'stylesheet';
    document.head.appendChild(fontLink);

    // C·∫≠p nh·∫≠t style chung
    style.textContent = `
        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(20px); }
            to { opacity: 1; transform: translateY(0); }
        }
        
        @keyframes slideIn {
            from { transform: translateX(100%); }
            to { transform: translateX(0); }
        }
        
        .chat-message {
            display: flex;
            margin-bottom: 20px;
            animation: fadeIn ${THEME.animationDuration} ease;
        }
        
        .chat-avatar {
            width: ${THEME.avatarSize};
            height: ${THEME.avatarSize};
            border-radius: 50%;
            background-size: cover;
            flex-shrink: 0;
            box-shadow: 0 2px 5px rgba(0,0,0,0.1);
            border: 2px solid #fff;
        }
        
        .chat-bubble {
            max-width: 70%;
            padding: 15px 20px;
            font-size: ${THEME.fontSize};
            line-height: 1.5;
            box-shadow: 0 3px 10px rgba(0,0,0,0.08);
            transition: all 0.3s ease;
        }
        
        .chat-bubble:hover {
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(0,0,0,0.1);
        }
        
        @media screen and (max-width: 768px) {
            #chat-window {
                position: fixed !important;
                top: 0 !important;
                left: 0 !important;
                right: 0 !important;
                bottom: 0 !important;
                width: 100% !important;
                height: 100% !important;
                max-height: none !important;
                border-radius: 0 !important;
                margin: 0 !important;
            }

            #chat-messages {
                height: calc(100% - 130px) !important;
                max-height: none !important;
            }

            .chat-bubble {
                max-width: 85%;
                font-size: 14px;
            }

            #chat-text {
                font-size: 16px !important;
            }

            #send-btn {
                padding: 10px 15px !important;
                min-width: 60px;
            }

            #chat-bubble {
                width: 50px !important;
                height: 50px !important;
                bottom: 20px !important;
                right: 20px !important;
            }
        }

        @media screen and (max-width: 480px) {
            .chat-input-container {
                flex-direction: column !important;
                gap: 10px !important;
            }

            #chat-text {
                margin-right: 0 !important;
                margin-bottom: 10px !important;
            }

            #send-btn {
                width: 100% !important;
                padding: 12px !important;
            }

            #chat-bubble {
                width: 50px !important;
                height: 50px !important;
                bottom: 10px !important;
                right: 10px !important;
            }
        }
    `;
    
    // Th√™m style v√†o document
    document.head.appendChild(style);

    // T·∫°o chat bubble
    const chatBubble = document.createElement("div");
    chatBubble.id = "chat-bubble";
    chatBubble.style.cssText = `
        position: fixed;
        bottom: clamp(15px, 3vw, 20px);
        right: clamp(15px, 3vw, 20px);
        width: ${THEME.bubbleSize};
        height: ${THEME.bubbleSize};
        background-image: url(${THEME.bubbleImage});
        background-size: cover;
        background-position: center;
        border-radius: 50%;
        cursor: pointer;
        z-index: 1000;
        box-shadow: 0px 4px 6px rgba(0, 0, 0, 0.1);
        transition: transform 0.3s ease;
    `;

    // Th√™m hover effect cho chat bubble
    chatBubble.addEventListener('mouseover', () => {
        chatBubble.style.transform = 'scale(1.1)';
    });
    chatBubble.addEventListener('mouseout', () => {
        chatBubble.style.transform = 'scale(1)';
    });

    // T·∫°o chat window
    const chatWindow = document.createElement("div");
    chatWindow.id = "chat-window";

    // C·∫≠p nh·∫≠t HTML c·ªßa chat window tr∆∞·ªõc
    chatWindow.innerHTML = `
        <div class="chat-header">
            <div style="display: flex; align-items: center; gap: 10px;">
                <img src="${THEME.botAvatar}" style="width: 35px; height: 35px; border-radius: 50%;">
                <div>
                    <div style="font-weight: 500;">Mew</div>
                    <div style="font-size: 12px; opacity: 0.8;">Ng∆∞·ªùi b·∫°n ƒë·ªìng h√†nh c·ªßa b·∫°n</div>
                </div>
            </div>
            <div style="display: flex; gap: 10px;">
                <button id="clear-chat" style="background: none; border: none; color: white; cursor: pointer; padding: 5px;">
                    üóëÔ∏è X√≥a
                </button>
                <button id="close-chat" style="background: none; border: none; color: white; cursor: pointer; font-size: 24px;">
                    √ó
                </button>
            </div>
        </div>
        <div id="chat-messages"></div>
        <div class="chat-input-container">
            <textarea id="chat-text" placeholder="Nh·∫≠p tin nh·∫Øn c·ªßa b·∫°n..."></textarea>
            <button id="send-btn">G·ª≠i</button>
        </div>
    `;

    // Sau ƒë√≥ m·ªõi th√™m style
    chatWindow.style.cssText = `
        display: none;
        position: fixed;
        bottom: 100px;
        right: 20px;
        width: min(90vw, 400px);
        height: min(80vh, 600px);
        background: white;
        border-radius: 20px;
        box-shadow: 0 5px 30px rgba(0,0,0,0.2);
        flex-direction: column;
        z-index: 1000;
        overflow: hidden;
    `;

    // Style cho c√°c ph·∫ßn t·ª≠ con
    chatWindow.querySelector('.chat-header').style.cssText = `
        padding: 15px;
        background: ${THEME.primaryGradient};
        color: white;
        display: flex;
        justify-content: space-between;
        align-items: center;
    `;

    chatWindow.querySelector('#chat-messages').style.cssText = `
        flex: 1;
        padding: 15px;
        overflow-y: auto;
        background-color: #f8f9fa;
        height: calc(100% - 130px);
    `;

    chatWindow.querySelector('.chat-input-container').style.cssText = `
        padding: 10px 15px;
        background-color: white;
        border-top: 1px solid #eee;
        display: flex;
        flex-direction: column;
        gap: 10px;
        align-items: stretch;
    `;

    chatWindow.querySelector('#chat-text').style.cssText = `
        width: 100%;
        padding: 10px 15px;
        border: 1px solid #ddd;
        border-radius: 20px;
        outline: none;
        resize: none;
        max-height: 100px;
        min-height: 40px;
        font-size: 14px;
        box-sizing: border-box;
    `;

    chatWindow.querySelector('#send-btn').style.cssText = `
        width: 100%;
        padding: 12px;
        background: ${THEME.primaryGradient};
        color: white;
        border: none;
        border-radius: 20px;
        cursor: pointer;
        font-size: 14px;
        font-weight: 500;
        transition: opacity 0.2s;
    `;

    chatWindow.querySelector('#send-btn').addEventListener('mouseover', function() {
        this.style.opacity = '0.9';
    });
    chatWindow.querySelector('#send-btn').addEventListener('mouseout', function() {
        this.style.opacity = '1';
    });

    // Th√™m v√†o document
    document.body.appendChild(chatBubble);  // Th√™m chat bubble
    document.body.appendChild(chatWindow);   // Th√™m chat window

    // Th√™m bi·∫øn l∆∞u tr·ªØ l·ªãch s·ª≠ chat
    let chatHistory = JSON.parse(localStorage.getItem('chatHistory')) || [];

    // C·∫≠p nh·∫≠t tin nh·∫Øn ch√†o m·ª´ng
    const welcomeMessage = `Hey c·∫≠u! T·ªõ l√† Mew üëã  

T·ªõ nghe n√≥i d·∫°o n√†y c·∫≠u ƒëang g·∫∑p nhi·ªÅu kh√≥ khƒÉn v√† ƒëang c√¢n nh·∫Øc vi·ªác v·ªÅ Tuy√™n Quang? T·ªõ th·∫≠t s·ª± hi·ªÉu m√†‚Äîƒë√¥i khi c√¥ng vi·ªác v√† cu·ªôc s·ªëng ·ªü S√†i G√≤n c√≥ th·ªÉ qu√° s·ª©c, khi·∫øn c·∫≠u c·∫£m th·∫•y m·ªát m·ªèi v√† ch√¥ng ch√™nh.  

Chia s·∫ª v·ªõi t·ªõ nh√©. ƒêi·ªÅu g√¨ ƒëang khi·∫øn c·∫≠u c·∫£m th·∫•y n·∫∑ng l√≤ng nh·∫•t? T·ªõ ·ªü ƒë√¢y ƒë·ªÉ l·∫Øng nghe, c√πng c·∫≠u nh√¨n nh·∫≠n m·ªçi th·ª© th·∫≠t r√µ r√†ng v√† t√¨m ra h∆∞·ªõng ƒëi ph√π h·ª£p nh·∫•t cho c·∫≠u.`;

    // Th√™m h√†m l∆∞u chatHistory
    function saveChatHistory() {
        localStorage.setItem('chatHistory', JSON.stringify(chatHistory));
    }

    // Th√™m th∆∞ vi·ªán marked.js v√†o head
    const markedScript = document.createElement('script');
    markedScript.src = 'https://cdn.jsdelivr.net/npm/marked/marked.min.js';
    document.head.appendChild(markedScript);

    // Th√™m URL c·ªßa Google Script Web App
    const SCRIPT_URL = 'https://script.google.com/macros/s/AKfycbw1nbaidJJA0T1Sg5Ay-qxjns8m025FSKZoHZr7R7kLWO4s3Xr2txAyZiODIcqrENYU/exec';

    // Th√™m CSS cho hi·ªáu ·ª©ng
    style.textContent += `
        .typing-indicator {
            display: flex;
            gap: 5px;
            padding: 10px 15px;
            margin: 10px 0;
        }

        .typing-dot {
            width: 8px;
            height: 8px;
            background: #b6b6b6;
            border-radius: 50%;
            animation: typingAnimation 1.4s infinite;
            opacity: 0.7;
        }

        .typing-dot:nth-child(2) { animation-delay: 0.2s; }
        .typing-dot:nth-child(3) { animation-delay: 0.4s; }

        @keyframes typingAnimation {
            0%, 100% { transform: translateY(0); }
            50% { transform: translateY(-4px); }
        }

        .chat-input-container.sending {
            position: relative;
        }

        .chat-input-container.sending::after {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            height: 2px;
            background: linear-gradient(90deg, transparent, ${THEME.primaryColor}, transparent);
            animation: loading 1.5s infinite;
        }

        @keyframes loading {
            0% { transform: translateX(-100%); }
            100% { transform: translateX(100%); }
        }
    `;

    // C·∫≠p nh·∫≠t h√†m appendMessage
    async function appendMessage(sender, message) {
        const messageElement = document.createElement("div");
        const isUser = sender === "You";
        
        messageElement.className = 'chat-message';
        messageElement.style.flexDirection = isUser ? 'row-reverse' : 'row';

        const avatar = document.createElement("div");
        avatar.className = 'chat-avatar';
        avatar.style.backgroundImage = `url(${isUser ? THEME.userAvatar : THEME.botAvatar})`;
        avatar.style.margin = isUser ? '0 0 0 10px' : '0 10px 0 0';

        const bubble = document.createElement("div");
        bubble.className = 'chat-bubble';
        bubble.style.borderRadius = isUser ? '20px 20px 0 20px' : '20px 20px 20px 0';
        bubble.style.backgroundColor = isUser ? THEME.userMessageColor : THEME.botMessageColor;
        bubble.style.color = isUser ? THEME.userTextColor : THEME.botTextColor;
        
        // Th√™m class ƒë·ªÉ MathJax c√≥ th·ªÉ nh·∫≠n di·ªán
        bubble.classList.add('math-content');
        
        // S·ª≠ d·ª•ng marked ƒë·ªÉ parse Markdown
        bubble.innerHTML = marked.parse(message);

        messageElement.appendChild(avatar);
        messageElement.appendChild(bubble);
        chatMessages.appendChild(messageElement);
        chatMessages.scrollTop = chatMessages.scrollHeight;
        
        // ƒê·∫£m b·∫£o MathJax ƒë√£ ƒë∆∞·ª£c load tr∆∞·ªõc khi render
        if (window.MathJax) {
            MathJax.typesetPromise([bubble]).catch((err) => console.log('MathJax error:', err));
        }
        
        saveChatHistory();

        // L∆∞u v√†o Google Doc
        if (SCRIPT_URL) {
            try {
                // T·∫°o form ·∫©n
                const form = document.createElement('form');
                form.style.display = 'none';
                form.method = 'POST';
                form.action = SCRIPT_URL;
                form.target = 'hidden_iframe';

                // Th√™m d·ªØ li·ªáu v√†o form
                const roleInput = document.createElement('input');
                roleInput.name = 'role';
                roleInput.value = sender === 'You' ? 'user' : 'assistant';
                form.appendChild(roleInput);

                const contentInput = document.createElement('input');
                contentInput.name = 'content';
                contentInput.value = message;
                form.appendChild(contentInput);

                // T·∫°o iframe ·∫©n ƒë·ªÉ nh·∫≠n response
                const iframe = document.createElement('iframe');
                iframe.name = 'hidden_iframe';
                iframe.style.display = 'none';
                document.body.appendChild(iframe);
                document.body.appendChild(form);

                // Submit form
                form.submit();

                // Cleanup sau 2 gi√¢y
                setTimeout(() => {
                    document.body.removeChild(form);
                    document.body.removeChild(iframe);
                }, 2000);

            } catch (error) {
                console.error('Error saving chat history:', error);
                // Ti·∫øp t·ª•c hi·ªÉn th·ªã chat ngay c·∫£ khi l∆∞u th·∫•t b·∫°i
            }
        }

        // N·∫øu l√† bot message, th√™m hi·ªáu ·ª©ng typing
        if (sender === 'Bot') {
            const typingIndicator = document.createElement('div');
            typingIndicator.className = 'typing-indicator';
            typingIndicator.innerHTML = `
                <div class="typing-dot"></div>
                <div class="typing-dot"></div>
                <div class="typing-dot"></div>
            `;
            chatMessages.appendChild(typingIndicator);
            chatMessages.scrollTop = chatMessages.scrollHeight;

            // ƒê·ª£i 1-2 gi√¢y ƒë·ªÉ hi·ªÉn th·ªã hi·ªáu ·ª©ng typing
            await new Promise(resolve => setTimeout(resolve, Math.random() * 1000 + 1000));
            chatMessages.removeChild(typingIndicator);
        }
    }

    // H√†m g·ªçi API Gemini
    async function fetchGeminiResponse(userMessage) {
        try {
            // Th√™m tin nh·∫Øn m·ªõi v√†o l·ªãch s·ª≠
            chatHistory.push({ role: "user", content: userMessage });
            
            // T·∫°o prompt v·ªõi to√†n b·ªô l·ªãch s·ª≠
            const messages = chatHistory.map(msg => 
                `${msg.role === 'user' ? 'User' : 'Assistant'}: ${msg.content}`
            ).join('\n');
            
            const fullPrompt = `${CONFIG.SYSTEM_PROMPT}\n\n${messages}\nAssistant:`;

            const response = await fetch(`https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent?key=${CONFIG.GEMINI_API_KEY}`, {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                },
                body: JSON.stringify({
                    contents: [{
                        parts: [{
                            text: fullPrompt
                        }]
                    }],
                    generationConfig: CONFIG.AI_CONFIG
                }),
            });

            const data = await response.json();
            if (data.candidates && data.candidates[0].content.parts[0]) {
                let botResponse = data.candidates[0].content.parts[0].text;
                chatHistory.push({ role: "assistant", content: botResponse });
                return botResponse;
            }
            return "Xin l·ªói, t√¥i kh√¥ng th·ªÉ tr·∫£ l·ªùi l√∫c n√†y.";
        } catch (error) {
            console.error("Error fetching Gemini response:", error);
            return "ƒê√£ x·∫£y ra l·ªói khi x·ª≠ l√Ω y√™u c·∫ßu c·ªßa b·∫°n.";
        }
    }

    // Th√™m h√†m ƒë·ªÉ load l·ªãch s·ª≠ chat khi m·ªü chatbot
    function loadChatHistory() {
        const messages = chatHistory;
        chatMessages.innerHTML = ''; // Clear current messages
        
        // N·∫øu kh√¥ng c√≥ l·ªãch s·ª≠ chat, hi·ªÉn th·ªã tin nh·∫Øn ch√†o m·ª´ng
        if (messages.length === 0) {
            appendMessage('Bot', welcomeMessage);
            // L∆∞u tin nh·∫Øn ch√†o m·ª´ng v√†o l·ªãch s·ª≠
            chatHistory.push({ role: "assistant", content: welcomeMessage });
            saveChatHistory();
        } else {
            messages.forEach(msg => {
                appendMessage(msg.role === 'user' ? 'You' : 'Bot', msg.content);
            });
        }
    }

    // Th√™m CSS cho Markdown
    style.textContent += `
        .chat-bubble strong {
            font-weight: bold;
        }
        .chat-bubble em {
            font-style: italic;
        }
        .chat-bubble code {
            background: rgba(0,0,0,0.05);
            padding: 2px 4px;
            border-radius: 3px;
        }
        .chat-bubble pre {
            background: rgba(0,0,0,0.05);
            padding: 10px;
            border-radius: 5px;
            overflow-x: auto;
        }
    `;

    // Th√™m event listeners
    chatBubble.addEventListener('click', () => {
        chatWindow.style.display = chatWindow.style.display === 'none' ? 'flex' : 'none';
        if (chatWindow.style.display === 'flex') {
            loadChatHistory();
        }
    });

    document.getElementById('close-chat').addEventListener('click', () => {
        chatWindow.style.display = 'none';
    });

    const chatText = document.getElementById('chat-text');
    const sendBtn = document.getElementById('send-btn');
    const chatMessages = document.getElementById('chat-messages');

    // G·ª≠i tin nh·∫Øn khi click n√∫t Send
    sendBtn.addEventListener('click', async () => {
        const message = chatText.value.trim();
        if (message) {
            // Th√™m class sending cho input container
            document.querySelector('.chat-input-container').classList.add('sending');
            
            // Disable input v√† n√∫t g·ª≠i
            chatText.disabled = true;
            sendBtn.disabled = true;

            appendMessage('You', message);
            chatText.value = '';
            
            // G·ªçi API v√† hi·ªÉn th·ªã response
            const response = await fetchGeminiResponse(message);
            
            // Remove sending class v√† enable input
            document.querySelector('.chat-input-container').classList.remove('sending');
            chatText.disabled = false;
            sendBtn.disabled = false;
            chatText.focus();

            appendMessage('Bot', response);
        }
    });

    // G·ª≠i tin nh·∫Øn khi nh·∫•n Enter (kh√¥ng ph·∫£i Shift + Enter)
    chatText.addEventListener('keypress', async (e) => {
        if (e.key === 'Enter' && !e.shiftKey) {
            e.preventDefault();
            sendBtn.click();
        }
    });

    // Auto-resize textarea
    chatText.addEventListener('input', function() {
        this.style.height = 'auto';
        this.style.height = (this.scrollHeight) + 'px';
    });

    // Th√™m MathJax config v√†o head
    const mathJaxScript = document.createElement('script');
    mathJaxScript.src = 'https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js';
    mathJaxScript.async = true;
    document.head.appendChild(mathJaxScript);

    // Th√™m MathJax config
    window.MathJax = {
        tex: {
            inlineMath: [['$', '$'], ['\\(', '\\)']],
            displayMath: [['$$', '$$'], ['\\[', '\\]']],
            processEscapes: true
        },
        svg: {
            fontCache: 'global'
        },
        startup: {
            typeset: false
        }
    };

    // Th√™m style cho c√¥ng th·ª©c to√°n h·ªçc
    style.textContent += `
        .chat-bubble .MathJax {
            max-width: 100%;
            overflow-x: auto;
            overflow-y: hidden;
        }
    `;

    // Th√™m h√†m x√≥a l·ªãch s·ª≠ chat
    function clearChatHistory() {
        localStorage.removeItem('chatHistory');
        chatHistory = [];
        chatMessages.innerHTML = '';
    }

    // Th√™m event listener cho n√∫t x√≥a
    document.getElementById('clear-chat').addEventListener('click', () => {
        if (confirm('B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a to√†n b·ªô l·ªãch s·ª≠ chat?')) {
            clearChatHistory();
        }
    });

    // Th√™m x·ª≠ l√Ω vu·ªët ƒë·ªÉ ƒë√≥ng chat tr√™n mobile
    let touchStartY = 0;
    let touchEndY = 0;

    chatWindow.addEventListener('touchstart', (e) => {
        touchStartY = e.touches[0].clientY;
    });

    chatWindow.addEventListener('touchmove', (e) => {
        touchEndY = e.touches[0].clientY;
    });

    chatWindow.addEventListener('touchend', () => {
        const swipeDistance = touchEndY - touchStartY;
        if (swipeDistance > 100) { // Vu·ªët xu·ªëng > 100px
            chatWindow.style.display = 'none';
        }
        touchStartY = 0;
        touchEndY = 0;
    });

    // Th√™m meta viewport n·∫øu ch∆∞a c√≥
    if (!document.querySelector('meta[name="viewport"]')) {
        const viewport = document.createElement('meta');
        viewport.name = 'viewport';
        viewport.content = 'width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no';
        document.head.appendChild(viewport);
    }

    // C·∫≠p nh·∫≠t style cho n√∫t v√† input khi disabled
    style.textContent += `
        #chat-text:disabled,
        #send-btn:disabled {
            opacity: 0.7;
            cursor: not-allowed;
        }

        .chat-input-container.sending #chat-text {
            background: #f5f5f5;
        }
    `;
})();
  